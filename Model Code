<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Purdue Campus SEIRS Epidemiological Model</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.0/dist/chart.umd.min.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #1a1a2e 0%, #16213e 100%);
            color: white;
            overflow-x: hidden;
        }

        .container {
            display: grid;
            grid-template-columns: 1fr 350px;
            height: 100vh;
            gap: 0;
        }

        .header {
            grid-column: 1 / -1;
            background: rgba(0, 0, 0, 0.3);
            padding: 20px;
            border-bottom: 2px solid rgba(255, 193, 7, 0.3);
        }

        .header h1 {
            background: linear-gradient(90deg, #ffd700 0%, #ffed4e 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            font-size: 28px;
            margin-bottom: 5px;
        }

        .header p {
            color: #aaa;
            font-size: 14px;
        }

        .disease-selector {
            display: flex;
            gap: 10px;
            margin-top: 15px;
        }

        .disease-btn {
            padding: 10px 20px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.3s;
            font-size: 14px;
        }

        .disease-btn.active {
            transform: scale(1.05);
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.4);
        }

        .disease-btn.covid {
            background: #ef4444;
            color: white;
        }

        .disease-btn.covid:not(.active) {
            background: #444;
            color: #999;
        }

        .disease-btn.flu {
            background: #3b82f6;
            color: white;
        }

        .disease-btn.flu:not(.active) {
            background: #444;
            color: #999;
        }

        .main-view {
            position: relative;
            background: linear-gradient(135deg, #1a4d2e 0%, #2d5016 100%);
            overflow: hidden;
        }

        #campusCanvas {
            width: 100%;
            height: 100%;
            display: block;
        }

        .event-notification {
            position: absolute;
            top: 20px;
            left: 20px;
            background: rgba(147, 51, 234, 0.9);
            padding: 15px 20px;
            border-radius: 10px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);
            animation: pulse 2s infinite;
            display: none;
        }

        .event-notification.active {
            display: block;
        }

        @keyframes pulse {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.05); }
        }

        .legend {
            position: absolute;
            bottom: 20px;
            left: 20px;
            background: rgba(0, 0, 0, 0.8);
            padding: 15px;
            border-radius: 10px;
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .legend h4 {
            margin-bottom: 10px;
            font-size: 14px;
        }

        .legend-item {
            display: flex;
            align-items: center;
            gap: 10px;
            margin: 5px 0;
            font-size: 12px;
        }

        .legend-color {
            width: 24px;
            height: 16px;
            border-radius: 3px;
        }

        .sidebar {
            background: rgba(0, 0, 0, 0.3);
            padding: 20px;
            overflow-y: auto;
            border-left: 2px solid rgba(255, 193, 7, 0.3);
        }

        .stat-card {
            background: linear-gradient(135deg, rgba(239, 68, 68, 0.8), rgba(220, 38, 38, 0.8));
            padding: 15px;
            border-radius: 10px;
            margin-bottom: 15px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);
        }

        .stat-card.exposed {
            background: linear-gradient(135deg, rgba(234, 179, 8, 0.8), rgba(202, 138, 4, 0.8));
        }

        .stat-card.recovered {
            background: linear-gradient(135deg, rgba(16, 185, 129, 0.8), rgba(5, 150, 105, 0.8));
        }

        .stat-card.susceptible {
            background: linear-gradient(135deg, rgba(59, 130, 246, 0.8), rgba(37, 99, 235, 0.8));
        }

        .stat-label {
            font-size: 11px;
            opacity: 0.9;
            margin-bottom: 5px;
        }

        .stat-value {
            font-size: 28px;
            font-weight: bold;
            margin-bottom: 3px;
        }

        .stat-percent {
            font-size: 12px;
            opacity: 0.9;
        }

        .control-panel {
            background: rgba(255, 255, 255, 0.05);
            padding: 15px;
            border-radius: 10px;
            margin-bottom: 15px;
        }

        .control-panel h3 {
            font-size: 14px;
            margin-bottom: 12px;
            color: #ffd700;
        }

        .control-btns {
            display: flex;
            gap: 10px;
            margin-bottom: 15px;
        }

        .control-btn {
            flex: 1;
            padding: 10px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.3s;
            font-size: 13px;
        }

        .control-btn.play {
            background: #fbbf24;
            color: #1a1a2e;
        }

        .control-btn.reset {
            background: #555;
            color: white;
        }

        .control-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);
        }

        .slider-control {
            margin-bottom: 15px;
        }

        .slider-label {
            display: flex;
            justify-content: space-between;
            font-size: 12px;
            margin-bottom: 8px;
        }

        .slider-value {
            color: #fbbf24;
            font-weight: 600;
        }

        input[type="range"] {
            width: 100%;
            height: 6px;
            border-radius: 5px;
            background: #444;
            outline: none;
            -webkit-appearance: none;
        }

        input[type="range"]::-webkit-slider-thumb {
            -webkit-appearance: none;
            appearance: none;
            width: 16px;
            height: 16px;
            border-radius: 50%;
            background: #fbbf24;
            cursor: pointer;
        }

        input[type="range"]::-moz-range-thumb {
            width: 16px;
            height: 16px;
            border-radius: 50%;
            background: #fbbf24;
            cursor: pointer;
        }

        .hotspot-alert {
            background: rgba(239, 68, 68, 0.2);
            border: 1px solid rgba(239, 68, 68, 0.5);
            padding: 12px;
            border-radius: 8px;
            margin-bottom: 15px;
        }

        .hotspot-alert h4 {
            font-size: 12px;
            margin-bottom: 8px;
            color: #fca5a5;
        }

        .hotspot-item {
            display: flex;
            justify-content: space-between;
            font-size: 11px;
            margin: 4px 0;
            padding: 4px 0;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }

        .hotspot-rate {
            color: #ef4444;
            font-weight: 600;
        }

        .chart-container {
            background: rgba(255, 255, 255, 0.05);
            padding: 15px;
            border-radius: 10px;
            margin-bottom: 15px;
            height: 200px;
        }

        canvas#timeSeriesChart {
            max-height: 170px;
        }

        .info-text {
            font-size: 11px;
            color: #aaa;
            margin-top: 5px;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>Purdue Campus SEIRS Epidemiological Model</h1>
            <p>Live visualization with immunity waning - Day <span id="dayCounter">0</span></p>
            <div class="disease-selector">
                <button class="disease-btn covid active" onclick="setDisease('covid')">COVID-19 (R₀ = 5.0)</button>
                <button class="disease-btn flu" onclick="setDisease('flu')">Influenza (R₀ = 2.5)</button>
            </div>
        </div>

        <div class="main-view">
            <canvas id="campusCanvas"></canvas>
            <div class="event-notification" id="eventNotification">
                <strong>🎉 <span id="eventName"></span></strong>
            </div>
            <div class="legend">
                <h4>Infection Level</h4>
                <div class="legend-item">
                    <div class="legend-color" style="background: #10b981;"></div>
                    <span>Safe (0%)</span>
                </div>
                <div class="legend-item">
                    <div class="legend-color" style="background: #84cc16;"></div>
                    <span>Low (&lt;2%)</span>
                </div>
                <div class="legend-item">
                    <div class="legend-color" style="background: #eab308;"></div>
                    <span>Moderate (2-5%)</span>
                </div>
                <div class="legend-item">
                    <div class="legend-color" style="background: #f97316;"></div>
                    <span>High (5-10%)</span>
                </div>
                <div class="legend-item">
                    <div class="legend-color" style="background: #ef4444;"></div>
                    <span>Very High (10-20%)</span>
                </div>
                <div class="legend-item">
                    <div class="legend-color" style="background: #991b1b;"></div>
                    <span>Critical (&gt;20%)</span>
                </div>
            </div>
        </div>

        <div class="sidebar">
            <div class="stat-card">
                <div class="stat-label">Active Infections</div>
                <div class="stat-value" id="infectedCount">0</div>
                <div class="stat-percent" id="infectedPercent">0.00% of campus</div>
            </div>

            <div class="stat-card exposed">
                <div class="stat-label">Exposed (Incubating)</div>
                <div class="stat-value" id="exposedCount">0</div>
                <div class="stat-percent" id="exposedPercent">0.00% of campus</div>
            </div>

            <div class="stat-card recovered">
                <div class="stat-label">Recovered (Immune)</div>
                <div class="stat-value" id="recoveredCount">0</div>
                <div class="stat-percent" id="recoveredPercent">0.00% of campus</div>
            </div>

            <div class="stat-card susceptible">
                <div class="stat-label">Susceptible</div>
                <div class="stat-value" id="susceptibleCount">0</div>
                <div class="stat-percent" id="susceptiblePercent">0.00% of campus</div>
            </div>

            <div class="chart-container">
                <canvas id="timeSeriesChart"></canvas>
            </div>

            <div class="control-panel">
                <h3>⚡ Simulation Controls</h3>
                <div class="control-btns">
                    <button class="control-btn play" onclick="toggleSimulation()">
                        <span id="playText">▶ Play</span>
                    </button>
                    <button class="control-btn reset" onclick="resetSimulation()">↻ Reset</button>
                </div>

                <div class="slider-control">
                    <div class="slider-label">
                        <span>Speed</span>
                        <span class="slider-value"><span id="speedValue">10.0</span>x</span>
                    </div>
                    <input type="range" min="20" max="500" value="100" id="speedSlider" oninput="updateSpeed()">
                </div>

                <div class="slider-control">
                    <div class="slider-label">
                        <span>Initial Infected</span>
                        <span class="slider-value" id="initialInfectedValue">10</span>
                    </div>
                    <input type="range" min="1" max="100" value="10" id="initialInfectedSlider" oninput="updateInitialInfected()">
                </div>
            </div>

            <div class="control-panel">
                <h3>📊 Policy Interventions</h3>
                
                <div class="slider-control">
                    <div class="slider-label">
                        <span>Masking</span>
                        <span class="slider-value"><span id="maskingValue">0</span>%</span>
                    </div>
                    <input type="range" min="0" max="100" value="0" id="maskingSlider" oninput="updateMasking()">
                    <div class="info-text">Reduces transmission by up to 50%</div>
                </div>

                <div class="slider-control">
                    <div class="slider-label">
                        <span>Social Distancing</span>
                        <span class="slider-value"><span id="distancingValue">0</span>%</span>
                    </div>
                    <input type="range" min="0" max="100" value="0" id="distancingSlider" oninput="updateDistancing()">
                    <div class="info-text">Reduces transmission by up to 40%</div>
                </div>

                <div class="slider-control">
                    <div class="slider-label">
                        <span>Vaccination</span>
                        <span class="slider-value"><span id="vaccinationValue">0</span>%</span>
                    </div>
                    <input type="range" min="0" max="100" value="0" id="vaccinationSlider" oninput="updateVaccination()">
                    <div class="info-text">Initial population immunity</div>
                </div>

                <div class="slider-control">
                    <div class="slider-label">
                        <span>Immunity Duration</span>
                        <span class="slider-value"><span id="immunityValue">90</span> days</span>
                    </div>
                    <input type="range" min="30" max="365" value="90" id="immunitySlider" oninput="updateImmunity()">
                    <div class="info-text">Time until recovered become susceptible</div>
                </div>
            </div>

            <div class="hotspot-alert">
                <h4>⚠️ High-Risk Buildings</h4>
                <div id="hotspotList"></div>
            </div>
        </div>
    </div>

    <script>
        // Campus buildings data
        const campusBuildings = [
            { id: 1, name: 'Lawson', x: 250, y: 200, pop: 3000, type: 'academic' },
            { id: 2, name: 'Math Sci', x: 350, y: 180, pop: 2000, type: 'academic' },
            { id: 3, name: 'Physics', x: 450, y: 200, pop: 1500, type: 'academic' },
            { id: 4, name: 'Chemistry', x: 550, y: 180, pop: 2500, type: 'academic' },
            { id: 5, name: 'WALC', x: 400, y: 280, pop: 4000, type: 'academic' },
            { id: 6, name: 'ENAD', x: 200, y: 300, pop: 1800, type: 'academic' },
            { id: 7, name: 'Armstrong', x: 500, y: 350, pop: 2200, type: 'academic' },
            { id: 8, name: 'HSSE', x: 300, y: 380, pop: 1600, type: 'academic' },
            { id: 9, name: 'Cary Quad', x: 150, y: 450, pop: 2500, type: 'residence', contact: 2.0 },
            { id: 10, name: 'Earhart', x: 650, y: 280, pop: 1800, type: 'residence', contact: 2.0 },
            { id: 11, name: 'Hillenbrand', x: 700, y: 400, pop: 2000, type: 'residence', contact: 2.0 },
            { id: 12, name: 'Harrison', x: 250, y: 480, pop: 1600, type: 'residence', contact: 2.0 },
            { id: 13, name: 'Tarkington', x: 350, y: 500, pop: 1400, type: 'residence', contact: 2.0 },
            { id: 14, name: 'PMU', x: 400, y: 400, pop: 5000, type: 'social', contact: 1.8 },
            { id: 15, name: 'Rec Center', x: 550, y: 480, pop: 3000, type: 'social', contact: 1.6 },
            { id: 16, name: 'Ford Dining', x: 450, y: 520, pop: 2000, type: 'dining', contact: 1.5 },
            { id: 17, name: 'Wiley Dining', x: 200, y: 520, pop: 1800, type: 'dining', contact: 1.5 },
            { id: 18, name: 'Ross-Ade', x: 100, y: 150, pop: 8000, type: 'athletic', contact: 3.0 },
            { id: 19, name: 'Mackey Arena', x: 650, y: 150, pop: 4000, type: 'athletic', contact: 2.5 }
        ];

        // Disease parameters for SEIRS model
        const diseases = {
            covid: {
                name: "COVID-19",
                beta: 0.5,      // Transmission rate
                sigma: 0.2,     // Incubation rate (1/5 days)
                gamma: 0.1,     // Recovery rate (1/10 days)
                xi: 1/90        // Immunity loss rate (1/90 days = 3 months)
            },
            flu: {
                name: "Influenza",
                beta: 0.8,
                sigma: 0.5,     // Incubation rate (1/2 days)
                gamma: 0.33,    // Recovery rate (1/3 days)
                xi: 1/90
            }
        };

        // Campus events
        const campusEvents = [
            { day: 20, name: "Football Game", buildings: [18], multiplier: 2.5, duration: 1 },
            { day: 45, name: "Spring Break", multiplier: 0.3, duration: 7 },
            { day: 52, name: "Return from Break", multiplier: 1.5, duration: 3 },
            { day: 75, name: "Finals Week", multiplier: 0.6, duration: 5 },
            { day: 100, name: "Homecoming", buildings: [18, 14, 15], multiplier: 2.0, duration: 2 }
        ];

        // Simulation state
        let currentDisease = 'covid';
        let currentDay = 0;
        let isRunning = false;
        let simulationInterval = null;
        let speed = 100;
        let maskingRate = 0;
        let distancingRate = 0;
        let vaccinationRate = 0;
        let immunityDuration = 90;
        let initialInfected = 10;

        // Building states
        let buildingStates = [];

        // Canvas setup
        const canvas = document.getElementById('campusCanvas');
        const ctx = canvas.getContext('2d');

        // Chart setup
        let timeSeriesChart;
        let chartData = {
            labels: [],
            susceptible: [],
            exposed: [],
            infected: [],
            recovered: []
        };

        function initCanvas() {
            canvas.width = canvas.offsetWidth;
            canvas.height = canvas.offsetHeight;
        }

        function initChart() {
            const chartCanvas = document.getElementById('timeSeriesChart');
            timeSeriesChart = new Chart(chartCanvas, {
                type: 'line',
                data: {
                    labels: chartData.labels,
                    datasets: [
                        {
                            label: 'Infected',
                            data: chartData.infected,
                            borderColor: '#ef4444',
                            backgroundColor: 'rgba(239, 68, 68, 0.1)',
                            tension: 0.4,
                            fill: true
                        },
                        {
                            label: 'Exposed',
                            data: chartData.exposed,
                            borderColor: '#eab308',
                            backgroundColor: 'rgba(234, 179, 8, 0.1)',
                            tension: 0.4,
                            fill: true
                        },
                        {
                            label: 'Recovered',
                            data: chartData.recovered,
                            borderColor: '#10b981',
                            backgroundColor: 'rgba(16, 185, 129, 0.1)',
                            tension: 0.4,
                            fill: true
                        }
                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: true,
                            labels: { color: '#fff', font: { size: 10 } }
                        }
                    },
                    scales: {
                        x: { 
                            display: true,
                            ticks: { color: '#999', font: { size: 9 } },
                            grid: { color: 'rgba(255,255,255,0.1)' }
                        },
                        y: { 
                            display: true,
                            ticks: { color: '#999', font: { size: 9 } },
                            grid: { color: 'rgba(255,255,255,0.1)' }
                        }
                    }
                }
            });
        }

        function initSimulation() {
            buildingStates = campusBuildings.map(building => ({
                id: building.id,
                S: building.pop * (1 - vaccinationRate / 100) - initialInfected / campusBuildings.length,
                E: 0,
                I: initialInfected / campusBuildings.length,
                R: building.pop * (vaccinationRate / 100)
            }));
            
            chartData = {
                labels: [],
                susceptible: [],
                exposed: [],
                infected: [],
                recovered: []
            };
            currentDay = 0;
            updateDisplay();
        }

        function getBuildingColor(state) {
            const total = state.S + state.E + state.I + state.R;
            const infectionRate = (state.I + state.E) / total;
            
            if (infectionRate === 0) return '#10b981';
            if (infectionRate < 0.02) return '#84cc16';
            if (infectionRate < 0.05) return '#eab308';
            if (infectionRate < 0.10) return '#f97316';
            if (infectionRate < 0.20) return '#ef4444';
            return '#991b1b';
        }

        function getBuildingSize(type) {
            switch(type) {
                case 'athletic': return { w: 60, h: 40 };
                case 'social': return { w: 50, h: 35 };
                case 'residence': return { w: 40, h: 40 };
                case 'dining': return { w: 35, h: 30 };
                default: return { w: 40, h: 30 };
            }
        }

        function drawCampus() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            
            // Draw grid
            ctx.strokeStyle = 'rgba(255, 255, 255, 0.05)';
            ctx.lineWidth = 1;
            for (let x = 0; x < canvas.width; x += 40) {
                ctx.beginPath();
                ctx.moveTo(x, 0);
                ctx.lineTo(x, canvas.height);
                ctx.stroke();
            }
            for (let y = 0; y < canvas.height; y += 40) {
                ctx.beginPath();
                ctx.moveTo(0, y);
                ctx.lineTo(canvas.width, y);
                ctx.stroke();
            }
            
            // Draw campus paths
            ctx.strokeStyle = '#444';
            ctx.lineWidth = 3;
            ctx.setLineDash([10, 5]);
            ctx.strokeRect(100, 100, 600, 450);
            ctx.beginPath();
            ctx.moveTo(400, 100);
            ctx.lineTo(400, 550);
            ctx.stroke();
            ctx.beginPath();
            ctx.moveTo(100, 325);
            ctx.lineTo(700, 325);
            ctx.stroke();
            ctx.setLineDash([]);
            
            // Draw buildings
            campusBuildings.forEach((building, idx) => {
                const state = buildingStates[idx];
                const size = getBuildingSize(building.type);
                const color = getBuildingColor(state);
                const infectionRate = ((state.I + state.E) / (state.S + state.E + state.I + state.R) * 100).toFixed(1);
                
                // Shadow
                ctx.fillStyle = 'rgba(0, 0, 0, 0.3)';
                ctx.fillRect(building.x - size.w/2 + 3, building.y - size.h/2 + 3, size.w, size.h);
                
                // Building
                ctx.fillStyle = color;
                ctx.strokeStyle = '#000';
                ctx.lineWidth = 2;
                ctx.fillRect(building.x - size.w/2, building.y - size.h/2, size.w, size.h);
                ctx.strokeRect(building.x - size.w/2, building.y - size.h/2, size.w, size.h);
                
                // Infection indicator
                if (state.I > 0) {
                    const pulse = Math.sin(Date.now() / 300) * 0.3 + 0.7;
                    ctx.fillStyle = `rgba(239, 68, 68, ${pulse})`;
                    ctx.beginPath();
                    ctx.arc(building.x, building.y - size.h/2 - 8, 5, 0, Math.PI * 2);
                    ctx.fill();
                }
                
                // Labels
                ctx.fillStyle = '#e5e7eb';
                ctx.font = 'bold 11px sans-serif';
                ctx.textAlign = 'center';
                ctx.fillText(building.name, building.x, building.y + size.h/2 + 15);
                
                ctx.fillStyle = '#fbbf24';
                ctx.font = '10px sans-serif';
                ctx.fillText(infectionRate + '%', building.x, building.y + size.h/2 + 27);
            });
        }

        function getCurrentEvent() {
            return campusEvents.find(e => 
                currentDay >= e.day && currentDay < e.day + (e.duration || 1)
            );
        }

        function simulateStep() {
            const params = diseases[currentDisease];
            const event = getCurrentEvent();
            const maskEffect = 1 - (maskingRate / 100) * 0.5;
            const distanceEffect = 1 - (distancingRate / 100) * 0.4;
            
            // Update xi based on immunity duration slider
            const xi = 1 / immunityDuration;
            
            buildingStates = buildingStates.map((state, idx) => {
                const building = campusBuildings[idx];
                
                let eventMultiplier = 1.0;
                if (event) {
                    if (event.buildings && event.buildings.includes(building.id)) {
                        eventMultiplier = event.multiplier;
                    } else if (!event.buildings) {
                        eventMultiplier = event.multiplier;
                    }
                }
                
                const contactMultiplier = building.contact || 1.0;
                
                const beta = params.beta * maskEffect * distanceEffect * eventMultiplier * contactMultiplier;
                
                const N = state.S + state.E + state.I + state.R;
                
                // SEIRS equations (added xi for immunity waning)
                const dS = -(beta * state.S * state.I) / N + xi * state.R; // Recovered become susceptible again
                const dE = (beta * state.S * state.I) / N - params.sigma * state.E;
                const dI = params.sigma * state.E - params.gamma * state.I;
                const dR = params.gamma * state.I - xi * state.R; // Lose immunity over time
                
                // Inter-building transmission
                const mobilityRate = 0.05;
                const avgInfectedRate = buildingStates.reduce((sum, s) => sum + s.I, 0) / 
                                       buildingStates.reduce((sum, s) => sum + s.S + s.E + s.I + s.R, 0);
                
                const externalExposure = mobilityRate * avgInfectedRate * state.S * beta;
                
                return {
                    id: state.id,
                    S: Math.max(0, state.S + dS - externalExposure * 0.1),
                    E: Math.max(0, state.E + dE + externalExposure * 0.1),
                    I: Math.max(0, state.I + dI),
                    R: Math.max(0, state.R + dR)
                };
            });
            
            currentDay++;
            updateDisplay();
        }

        function updateDisplay() {
            document.getElementById('dayCounter').textContent = currentDay;
            
            // Calculate totals
            const totals = buildingStates.reduce((acc, state) => ({
                S: acc.S + state.S,
                E: acc.E + state.E,
                I: acc.I + state.I,
                R: acc.R + state.R
            }), { S: 0, E: 0, I: 0, R: 0 });
            
            const totalPop = totals.S + totals.E + totals.I + totals.R;
            
            // Update stat cards
            document.getElementById('infectedCount').textContent = Math.round(totals.I).toLocaleString();
            document.getElementById('infectedPercent').textContent = ((totals.I/totalPop)*100).toFixed(2) + '% of campus';
            
            document.getElementById('exposedCount').textContent = Math.round(totals.E).toLocaleString();
            document.getElementById('exposedPercent').textContent = ((totals.E/totalPop)*100).toFixed(2) + '% of campus';
            
            document.getElementById('recoveredCount').textContent = Math.round(totals.R).toLocaleString();
            document.getElementById('recoveredPercent').textContent = ((totals.R/totalPop)*100).toFixed(2) + '% of campus';
            
            document.getElementById('susceptibleCount').textContent = Math.round(totals.S).toLocaleString();
            document.getElementById('susceptiblePercent').textContent = ((totals.S/totalPop)*100).toFixed(2) + '% of campus';
            
            // Update chart
            if (currentDay % 5 === 0) { // Update chart every 5 days to keep it readable
                chartData.labels.push(currentDay);
                chartData.susceptible.push(Math.round(totals.S));
                chartData.exposed.push(Math.round(totals.E));
                chartData.infected.push(Math.round(totals.I));
                chartData.recovered.push(Math.round(totals.R));
                
                if (chartData.labels.length > 30) {
                    chartData.labels.shift();
                    chartData.susceptible.shift();
                    chartData.exposed.shift();
                    chartData.infected.shift();
                    chartData.recovered.shift();
                }
                
                timeSeriesChart.update('none');
            }
            
            // Update hotspots
            const hotspots = buildingStates
                .map((state, idx) => ({
                    name: campusBuildings[idx].name,
                    rate: (state.I + state.E) / (state.S + state.E + state.I + state.R)
                }))
                .filter(b => b.rate > 0.05)
                .sort((a, b) => b.rate - a.rate)
                .slice(0, 5);
            
            const hotspotList = document.getElementById('hotspotList');
            if (hotspots.length > 0) {
                hotspotList.innerHTML = hotspots.map(h => 
                    `<div class="hotspot-item">
                        <span>${h.name}</span>
                        <span class="hotspot-rate">${(h.rate * 100).toFixed(1)}%</span>
                    </div>`
                ).join('');
            } else {
                hotspotList.innerHTML = '<div style="color: #10b981; font-size: 11px;">✓ All buildings safe</div>';
            }
            
            // Update event notification
            const event = getCurrentEvent();
            const notification = document.getElementById('eventNotification');
            if (event) {
                document.getElementById('eventName').textContent = event.name;
                notification.classList.add('active');
            } else {
                notification.classList.remove('active');
            }
            
            // Draw canvas
            drawCampus();
        }

        function toggleSimulation() {
            isRunning = !isRunning;
            const playText = document.getElementById('playText');
            
            if (isRunning) {
                playText.textContent = '⏸ Pause';
                simulationInterval = setInterval(simulateStep, speed);
            } else {
                playText.textContent = '▶ Play';
                clearInterval(simulationInterval);
            }
        }

        function resetSimulation() {
            isRunning = false;
            document.getElementById('playText').textContent = '▶ Play';
            clearInterval(simulationInterval);
            initSimulation();
            drawCampus();
        }

        function setDisease(disease) {
            currentDisease = disease;
            document.querySelectorAll('.disease-btn').forEach(btn => btn.classList.remove('active'));
            document.querySelector(`.disease-btn.${disease === 'covid' ? 'covid' : 'flu'}`).classList.add('active');
            resetSimulation();
        }

        function updateSpeed() {
            const slider = document.getElementById('speedSlider');
            speed = parseInt(slider.value);
            const speedMultiplier = (1000 / speed).toFixed(1);
            document.getElementById('speedValue').textContent = speedMultiplier;
            
            if (isRunning) {
                clearInterval(simulationInterval);
                simulationInterval = setInterval(simulateStep, speed);
            }
        }

        function updateMasking() {
            maskingRate = parseInt(document.getElementById('maskingSlider').value);
            document.getElementById('maskingValue').textContent = maskingRate;
        }

        function updateDistancing() {
            distancingRate = parseInt(document.getElementById('distancingSlider').value);
            document.getElementById('distancingValue').textContent = distancingRate;
        }

        function updateVaccination() {
            vaccinationRate = parseInt(document.getElementById('vaccinationSlider').value);
            document.getElementById('vaccinationValue').textContent = vaccinationRate;
        }

        function updateImmunity() {
            immunityDuration = parseInt(document.getElementById('immunitySlider').value);
            document.getElementById('immunityValue').textContent = immunityDuration;
        }

        function updateInitialInfected() {
            initialInfected = parseInt(document.getElementById('initialInfectedSlider').value);
            document.getElementById('initialInfectedValue').textContent = initialInfected;
        }

        // Initialize on load
        window.addEventListener('load', () => {
            initCanvas();
            initChart();
            initSimulation();
            drawCampus();
        });

        // Handle window resize
        window.addEventListener('resize', () => {
            initCanvas();
            drawCampus();
        });

        // Animation loop for smooth pulsing effects
        function animate() {
            drawCampus();
            requestAnimationFrame(animate);
        }
        animate();
    </script>
</body>
</html>
